#!/usr/bin/env bash

# Usage:
#
#     $ bin/compile <build-dir> <cache-dir> <env-path>


# Fail fast and fail hard.
set -eo pipefail

# Prepend proper path for virtualenv hackery. This will be deprecated soon.
export PATH=:/usr/local/bin:$PATH

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2
ENV_FILE=$3


#############################################
# uncomment this for clean all cached stuff #
#############################################
#echo "flushing CACHE_DIR..."               #
#rm -Rf $CACHE_DIR/                         #
#echo "done!"                               #
#############################################


# sw vars.
# will download files to vendor/downloaded dir
# will decompress files to vendor/<name>
DOWNLOAD_DIR="vendor/downloaded"
WORKDIR="vendor/tmp"
INSTALLDIR="vendor/tools"


GTS_WORKDIR="$WORKDIR/gts"
GTS_INSTALLDIR="$INSTALLDIR/gts"
GTS_INSTALLTMP="gts_tmp"
GTS_LIBDIR="$GTS_INSTALLDIR/lib"
GTS_INCLUDEDIR="$GTS_INSTALLDIR/include"
GTS_BINDIR="$GTS_INSTALLDIR/bin"
GTS_PKGDIR="$GTS_LIBDIR/pkgconfig"
GTS_BINARY="gts-0.7.6.tar.gz"
GTS_URL="http://downloads.sourceforge.net/project/gts/gts/0.7.6"

GRAPHVIZ_WORKDIR="$WORKDIR/graphviz"
GRAPHVIZ_INSTALLDIR="$INSTALLDIR/graphviz"
GRAPHVIZ_INSTALLTMP="graphviz_tmp"
GRAPHVIZ_LIBDIR="$GRAPHVIZ_INSTALLDIR/lib"
GRAPHVIZ_INCLUDEDIR="$GRAPHVIZ_INSTALLDIR/include"
GRAPHVIZ_BINDIR="$GRAPHVIZ_INSTALLDIR/bin"
GRAPHVIZ_BINARY="graphviz-2.34.0.tar.gz"
GRAPHVIZ_URL="http://www.graphviz.org/pub/graphviz/stable/SOURCES"


###
### indent
###
indent() {
	c='s/^/      /'
}


###
### this function checks if dir exists, creates it (although mkdir -p does it by itself i think.. 
###
create_dir() {
	echo " (checking dir $1)"
	if [ ! -d "$1" ]; then
		#echo " $1 not found, creating..."
		mkdir -p "$1"
	fi
}

###
### this function downloads the tarballs
###
download_sw() {
	#$1 is the filename
	#$2 is the url
	#$3 is the dest dir
	if [ ! -f "$3/$1" ]; then
		# GTS requires curl -L xx > file
		# http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-11.html -> comparing strings using double quotes avoids parse errors
		if [ "$1" == "gts-0.7.6.tar.gz" ]; then
			echo "          downloading GTS from $GTS_URL/$GTS_BINARY to $s/$GTS_BINARY"
			curl -L $GTS_URL/$GTS_BINARY > $3/$GTS_BINARY
		else
			echo "          downloading GRAPHVIZ from $GRAPHVIZ_URL/$GRAPHVIZ_BINARY to $3/$GRAPHVIZ_BINARY"
			cd $3 && { curl -O "$GRAPHVIZ_URL/$GRAPHVIZ_BINARY" ; cd -; }
		fi
	fi
}

###
### this prepares the tarballs for compilation
###
prepare_workdir() {
	# $1 is the sourcedir
	# $2 is the filename
	# $3 is the destdir
	create_dir $3
	cp "$1/$2" $3
	cd $3
	tar zxvf $2 > /dev/null 2>&1
	# remove tarball
	rm $2
	cd - > /dev/null 2>&1 # back to initial dir, supress output
}

###
### this compiles and installs 
###
compile() {
	# $1 is the workdir
	# $2 is the starting dir
	cd $1
	if [ "$1" == "$GTS_WORKDIR" ]; then
		echo "compiling GTS"
		cd "gts-0.7.6"
		#echo " configuring with prefix=/gts"
		configure --prefix="/gts" > /dev/null 2>&1
		#echo " making"
		make -j5 > /dev/null 2>&1
		# DESTDIR deploys everything to tmpdir $GTS_INSTALLTMP
		# which is tmp_gts (app/temp/repo.git/gts_tmp)
		#echo " installing to /$2/$GTS_INSTALLTMP"
		make install DESTDIR="/$2/$GTS_INSTALLTMP" > /dev/null 2>&1
		GTS_COMPILATION_SPACE=`du -sh /$2/$GTS_INSTALLTMP| cut -f1 `
		echo " cleaning temporary stuff: $GTS_WORKDIR, releasing $GTS_COMPILATION_SPACE"
		rm -Rf $GTS_WORKDIR
		#echo " done!"
		
	else
		echo "compiling GRAPHVIZ"
		# check that libgts is available
		cd "graphviz-2.34.0"
		#echo " configuring with prefix=/graphviz --enable-shared=no --enable-static=yes --with-gts=yes"
		configure --prefix="/graphviz" --enable-shared=no --enable-static=yes --with-gts=yes > /dev/null 2>&1
		#echo " making"
		make -j5  > /dev/null 2>&1
		#echo " installing to /$2/$GRAPHVIZ_INSTALLTMP"
		make install DESTDIR="/$2/$GRAPHVIZ_INSTALLTMP" > /dev/null 2>&1
		GRAPHVIZ_COMPILATION_SPACE=`du -sh . | cut -f1`
		echo "cleaning temporary stuff: $GRAPHVIZ_WORKDIR, releasing $GRAPHVIZ_COMPILATION_SPACE"
		rm -Rf $GRAPHVIZ_WORKDIR
		#echo "done!"
	fi
	cd $2
}

#####

# create sw dirs
if [ ! -d $DOWNLOAD_DIR ]; then
	mkdir -p $DOWNLOAD_DIR
fi

echo "------> installing GRAPHVIZ"
##################################
### download files if required ###
##################################
echo "-------> downloading if required"
if [ ! -d $CACHE_DIR/downloads/gts ];then
 # download sw to dir
 download_sw $GTS_BINARY $GTS_URL $DOWNLOAD_DIR
 # move to cache dir
 create_dir $CACHE_DIR/downloads/gts
 cp $DOWNLOAD_DIR/$GTS_BINARY $CACHE_DIR/downloads/gts/
else
 # already cached, copy to $DOWNLOAD_DIR
 cp $CACHE_DIR/downloads/gts/$GTS_BINARY $DOWNLOAD_DIR/
fi

if [ ! -d $CACHE_DIR/downloads/graphviz ]; then
 download_sw $GRAPHVIZ_BINARY $GRAPHVIZ_URL $DOWNLOAD_DIR
 # copy to cache dir
 create_dir $CACHE_DIR/downloads/graphviz
 cp $DOWNLOAD_DIR/$GRAPHVIZ_BINARY $CACHE_DIR/downloads/graphviz/
else
 # copy from cache dir
 cp $CACHE_DIR/downloads/graphviz/$GRAPHVIZ_BINARY $DOWNLOAD_DIR/
fi
#echo $DOWNLOAD_DIR
#ls $DOWNLOAD_DIR

########################
### uncompress files ###
########################
# cp downloaded files to workdirs and uncompress them
echo "-------> preparing working dirs"
# copy GTS_BINARY from DOWNLOAD_DIR to GTS_WORKDIR, then uncompress it and remove tarball
prepare_workdir $DOWNLOAD_DIR $GTS_BINARY $GTS_WORKDIR
# do the same for GRAPHVIZ_BINARY
prepare_workdir $DOWNLOAD_DIR $GRAPHVIZ_BINARY $GRAPHVIZ_WORKDIR

# i would not need anymore the download files in workingdir, so remove them
DOWNLOAD_SPACE=`du -sh $DOWNLOAD_DIR | cut -f1`
echo "removing $DOWNLOAD_DIR freeing up $DOWNLOAD_SPACE"
rm -Rf $DOWNLOAD_DIR
#echo "done"

# now there sould not be vendor/downloaded dir
#echo "should not be 'downloaded' dir"
#ls vendor/

#####################
### compile files ###
#####################
echo "-------> compiling"
#echo "contents of CACHE_DIR/compiled"
#ls $CACHE_DIR/compiled/

BASE_DIR=`pwd`
#echo "          gts"
if [ ! -d $CACHE_DIR/compiled/gts_tmp ]; then
 # compile GTS
 #echo "           not cached (missing CACHE_DIR/compile/gts_tmp dir), compiling"
 # this leaves everything in $WORKING_DIR/$GTS_INSTALLTMP 
 #echo "compile $GTS_WORKDIR $BASE_DIR"
 compile $GTS_WORKDIR $BASE_DIR
 create_dir $CACHE_DIR/compiled
 # copy to cache dir
 echo "           compiled, copying from $GTS_INSTALLTMP to $CACHE_DIR/compiled"
 cp -aR $GTS_INSTALLTMP $CACHE_DIR/compiled/
 #echo "           contents of CACHE_DIR/compiled"
 #ls $CACHE_DIR/compiled/
else
 # already cached, copy from cache
 echo "(gts cached)"
 # this copies everything from gts to 'vendor/tools'
 create_dir $BASE_DIR/$INSTALLDIR/gts
 cp -aR $CACHE_DIR/compiled/gts_tmp/* $BASE_DIR/$INSTALLDIR/gts
 GTS_CACHED=1
fi

# once installed, update library path
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:"$BASE_DIR/$GTS_LIBDIR"
export LIBRARY_PATH=$LIBRARY_PATH:"$BASE_DIR/$GTS_LIBDIR"
export C_INCLUDE_PATH=$C_INCLUDE_PATH:"$BASE_DIR/$GTS_INCLUDEDIR"
export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:"$BASE_DIR/$GTS_INCLUDEDIR"
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:"$BASE_DIR/$GTS_PKGDIR"
export PATH=$PATH:"$BASE_DIR/$GTS_BINDIR"

if [ ! -d $CACHE_DIR/compiled/graphviz_tmp ]; then
 echo "          not cached (missing CACHE_DIR/compile/graphviz_tmp, compiling"
 # compile graphviz
 compile $GRAPHVIZ_WORKDIR $BASE_DIR
 create_dir $CACHE_DIR/compiled
 # copy to cache dir
 #echo "          compiled, copying from $GRAPHVIZ_INSTALLTMP to $CACHE_DIR/compiled"
 cp -aR $GRAPHVIZ_INSTALLTMP $CACHE_DIR/compiled/
 #echo "          contents of CACHE_DIR/compiled"
 #ls $CACHE_DIR/compiled/
else
 # already cached, copy from cache
 echo "(graphviz cached)"
 create_dir $BASE_DIR/$INSTALLDIR/graphviz
 cp -aR $CACHE_DIR/compiled/graphviz_tmp/* $BASE_DIR/$INSTALLDIR/graphviz
 GRAPHVIZ_CACHED=1
fi

# done, update envvars again
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:"$BASE_DIR/$GRAPHVIZ_LIBDIR"
export LIBRARY_PATH=$LIBRARY_PATH:"$BASE_DIR/$GRAPHVIZ_LIBDIR"
export C_INCLUDE_PATH=$C_INCLUDE_PATH:"$BASE_DIR/$GRAPHVIZ_INCLUDEDIR"
export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:"$BASE_DIR/$GRAPHVIZ_INCLUDEDIR"
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:"$BASE_DIR/$GRAPHVIZ_PKGDIR"
export PATH=$PATH:"$BASE_DIR/$GRAPHVIZ_BINDIR"

# so far, everything should be installed in
# gts_tmp
# graphviz_tmp

# now, add the tools dir to slug
echo "-------> adding gts and graphviz to slug "
# ./graphviz_tmp/graphviz
create_dir $BUILD_DIR/tools
# this does work for the first run (appcreate) but fails for second (missing $GTS_INSTALLTMP)
# because no compilation is done and therefore there is nothing in $GTS_INSTALLTMP
#if [[ -v GTS_CACHED ]] ; ######################################################################################## 
if [ -d $GTS_INSTALLTMP ]; then
 #ls $GTS_INSTALLTMP/
 cp -aR $GTS_INSTALLTMP/gts $BUILD_DIR/tools/
else
 # nothing in $GTS_INSTALLTMP, take it from $BASE_DIR/$INSTALDIR/gts
 cp -aR $BASE_DIR/$INSTALLDIR/gts $BUILD_DIR/tools/
fi

if [ -d $GRAPHVIZ_INSTALLTMP ]; then
 #ls $GRAPHVIZ_INSTALLTMP/
 cp -aR $GRAPHVIZ_INSTALLTMP/graphviz $BUILD_DIR/tools/
else
 # nothing in $GRAPHVIZ_INSTALLTMP, take it from $BASE_DIR/$INSTALLDIR/graphviz
 cp -aR $BASE_DIR/$INSTALLDIR/graphviz/* $BUILD_DIR/tools/
fi


# now i have all my stuff under .tools dir
# be careful to add the correct PATH to the application PATH=$PATH:/app/.tools/graphviz/bin

# remove vendor dir
VENDOR_DIR_SPACE=`du -sh vendor | cut -f1`
echo "removing 'vendor' dir, freeing up $VENDOR_DIR_SPACE"
rm -Rf vendor
# remove tmp installdirrs gts_tmp and graphviz_tmp
if [ -d gts_tmp ]; then
 TMPGTS_SPACE=`du -sh gts_tmp | cut -f1`
 echo "removing 'gts_tmp' dir, freeing up $TMPGTS_SPACE"
 rm -Rf gts_Tmp
fi

if [ -d graphviz_tmp ];then
 TMPGRAPHVIZ_SPACE=`du -sh graphviz_tmp | cut -f1`
 echo "removing 'graphviz_tmp' dir, freeing up $TMPGRAPHVIZ_SPACE"
 rm -Rf graphviz_tmp
fi
 
echo "-------> libs compiled"
echo "#############################"
echo " let's go for python environment"

#exit 0

echo "------> installing PYTHON"

unset GIT_DIR PYTHONHOME PYTHONPATH LD_LIBRARY__PATH LIBRARY_PATH

export PATH=/app/.heroku/python/bin:$BUILD_DIR/.heroku/python/bin:/app/.heroku/vendor/bin:$BUILD_DIR/.heroku/vendor/bin:$PATH
#export PATH=$BUILD_DIR/.heroku/python/bin:$BUILD_DIR/.heroku/vendor/bin:$PATH
#export PATH=/app/.heroku/python/bin:/app/.heroku/vendor/bin:$PATH
export PYTHONUNBUFFERED=1
export LANG=en_US.UTF-8
export C_INCLUDE_PATH=/app/.heroku/vendor/include:$BUILD_DIR/.heroku/vendor/include
export CPLUS_INCLUDE_PATH=/app/.heroku/vendor/include:$BUILD_DIR/.heroku/vendor/include
export LIBRARY_PATH=/app/.heroku/vendor/lib:$BUILD_DIR/.heroku/vendor/lib
export LD_LIBRARY_PATH=/app/.heroku/vendor/lib:$BUILD_DIR/.heroku/vendor/lib
export PKG_CONFIG_PATH=/app/.heroku/vendor/lib/pkg-config:$BUILD_DIR/.heroku/vendor/lib/pkg-config

VIRTUALENV_LOC=".heroku/venv"
DEFAULT_PYTHON_VERSION="python-2.7.4"
PYTHON_EXE="/app/.heroku/python/bin/python"
PIP_VERSION="1.3.1"
DISTRIBUTE_VERSION="0.6.36"
PROFILE_PATH="$BUILD_DIR/.profile.d/python.sh"

export BUILD_DIR CACHE_DIR BIN_DIR PROFILE_PATH
source $BIN_DIR/utils


cd $BUILD_DIR
source $BIN_DIR/steps/hooks/pre_compile

if [ ! -f requirements.txt ]; then
	echo "no requirements.txt"
	echo "-e ." > requirements.txt
fi

if [ ! -f runtime.txt ]; then
	echo "no runtime.txt, assuming $DEFAULT_PYTHON_VERSION"
	echo $DEFAULT_PYTHON_VERSION > runtime.txt
fi

# try to get .heroku dir from CACHE_DIR
# else create an empty one
#echo "preparing python runtime"

#mkdir -p $(dirname $PROFILE_PATH)
#if [ -d $CACHE_DIR/.heroku ]; then #################################
# echo "retrieving .heroku from cache"
# cp -aR $CACHE_DIR/.heroku .
# cp -aR $CACHE_DIR/.profile.d .
#else
# echo "not cached"
# mkdir .heroku
# mkdir -p $(dirname $PROFILE_PATH)
# PYTHON_VERSION=$(cat runtime.txt)
# if [ -f .heroku/python-version ]; then
#  if [ ! $(cat .heroku/python-version) = $PYTHON_VERSION ]; then
#      echo "Found $(cat .heroku/python-version), removing."
#      rm -fr .heroku/python
#  else
#    echo "Found previous installation for $PYTHON_VERSION"
#    SKIP_INSTALL=1
#  fi
# fi
# if [ ! "$SKIP_INSTALL" ]; then
#  echo "installing python $PYTHON_VERSION"
#  curl http://envy-versions.s3.amazonaws.com/$PYTHON_VERSION.tar.bz2 -s | tar jx &> /dev/null
#  if [[ $? != 0 ]] ; then
#	echo "ERROR: requested runtime ($PYTHON_VERSION) was not found."
#	exit 1
#  fi
#  mv python .heroku/python
#  echo $PYTHON_VERSION > .heroku/python-version
#  echo "downloaded python runtime, copying to CACHE_DIR"
  # copy everything to cache
#  cp -aR .heroku $CACHE_DIR/
#  cp -aR .profile.d $CACHE_DIR/
#  echo "CACHE_DIR contains:"
#  ls -la $CACHE_DIR/
# else
#  echo "Using Python runtime ($PYTHON_VERSION)"
# fi
#fi 
# end ###########################################################

#############3
mkdir .heroku
mkdir -p $(dirname $PROFILE_PATH)
PYTHON_VERSION=$(cat runtime.txt)
curl http://envy-versions.s3.amazonaws.com/$PYTHON_VERSION.tar.bz2 -s | tar jx &> /dev/null
mv python .heroku/python
echo $PYTHON_VERSION > .heroku/python-version
############

WORKING_DIR=$(pwd)

# check if required distribute and pip
echo "installing distribute"
cd $ROOT_DIR/vendor/distribute-$DISTRIBUTE_VERSION/
python setup.py install # &> /dev/null
cd $WORKING_DIR

echo "installing pip"
cd $ROOT_DIR/vendor/pip-$PIP_VERSION/
python setup.py install # &> /dev/null
cd $WORKING_DIR

#set -e
#hash -r

# before installing dependencies, export correct paths to env
#source $BIN_DIR/steps/pylibmc

echo "installing dependencies with pip"

#pip install -r requirements.txt --exists-action=w --src=./.heroku/src &> /dev/null
$WORKING_DIR/.heroku/python/bin/pip install -r requirements.txt --exists-action=w --src=./.heroku/src #&> /dev/null 

# Set context environment variables.
set-env PATH '$HOME/.heroku/python/bin:$HOME/tools/graphviz/bin:$PATH'
#set-env PATH '/app/.heroku/python/bin:/app/tools/graphviz/bin:$PATH'
set-env PYTHONUNBUFFERED true
set-env PYTHONHOME /app/.heroku/python
set-default-env LIBRARY_PATH /app/.heroku/vendor/lib:/app/tools/graphviz/lib:/app/tools/gts/lib
set-default-env LD_LIBRARY_PATH /app/.heroku/vendor/lib:/app/tools/graphviz/lib:/app/tools/gts/lib
set-default-env LANG en_US.UTF-8
set-default-env PYTHONHASHSEED random
set-default-env PYTHONPATH /app/

source $BIN_DIR/steps/hooks/post_compile

# check all the crap i have left lying around
echo "########## contents of CACHE_DIR"
ls $CACHE_DIR
echo "########## contents of BUILD_DIR"
ls $BUILD_DIR
echo "########## contents of BASE:DIR"
ls $BASE_DIR

# check path


exit 0


<<PYTHONCRAP

CACHED_DIRS=".heroku"

# Static configurations for virtualenv caches.
VIRTUALENV_LOC=".heroku/venv"
LEGACY_TRIGGER="lib/python2.7"
PROFILE_PATH="$BUILD_DIR/.profile.d/python.sh"

# Python version. This will be used in the future to specify custom Pythons.
DEFAULT_PYTHON_VERSION="python-2.7.4"
PYTHON_EXE="/app/.heroku/python/bin/python"
PIP_VERSION="1.3.1"
DISTRIBUTE_VERSION="0.6.36"

# Setup bpwatch
export PATH=$PATH:$ROOT_DIR/vendor/bpwatch
LOGPLEX_KEY="t.b396af7f-ad75-4643-8b9e-ebb288acc624"
export BPWATCH_STORE_PATH=$CACHE_DIR/bpwatch.json
BUILDPACK_VERSION=v28

# Support Anvil Build_IDs
[ ! "$REQUEST_ID" ] && REQUEST_ID=$SLUG_ID

# Sanitizing environment variables.
unset GIT_DIR PYTHONHOME PYTHONPATH LD_LIBRARY_PATH LIBRARY_PATH

bpwatch init $LOGPLEX_KEY
bpwatch build python $BUILDPACK_VERSION $REQUEST_ID
TMP_APP_DIR=$CACHE_DIR/tmp_app_dir

bpwatch start compile


# We'll need to send these statics to other scripts we `source`.
export BUILD_DIR CACHE_DIR BIN_DIR PROFILE_PATH

# Syntax sugar.
source $BIN_DIR/utils

# Directory Hacks for path consistiency.
APP_DIR='/app'
TMP_APP_DIR=$CACHE_DIR/tmp_app_dir

# Copy Anvil app dir to temporary storage...
bpwatch start anvil_appdir_stage
  if [ "$SLUG_ID" ]; then
    mkdir -p $TMP_APP_DIR
    deep-mv $APP_DIR $TMP_APP_DIR
  else
    deep-rm $APP_DIR
  fi
bpwatch stop anvil_appdir_stage

# Copy Application code in.
bpwatch start appdir_stage
  deep-mv $BUILD_DIR $APP_DIR
bpwatch stop appdir_stage

# Set new context.
ORIG_BUILD_DIR=$BUILD_DIR
BUILD_DIR=$APP_DIR

# Prepend proper path buildpack use.
export PATH=$BUILD_DIR/.heroku/python/bin:$BUILD_DIR/.heroku/vendor/bin:$PATH
export PYTHONUNBUFFERED=1
export LANG=en_US.UTF-8
export C_INCLUDE_PATH=/app/.heroku/vendor/include:$BUILD_DIR/.heroku/vendor/include
export CPLUS_INCLUDE_PATH=/app/.heroku/vendor/include:$BUILD_DIR/.heroku/vendor/include
export LIBRARY_PATH=/app/.heroku/vendor/lib:$BUILD_DIR/.heroku/vendor/lib
export LD_LIBRARY_PATH=/app/.heroku/vendor/lib:$BUILD_DIR/.heroku/vendor/lib
export PKG_CONFIG_PATH=/app/.heroku/vendor/lib/pkg-config:$BUILD_DIR/.heroku/vendor/lib/pkg-config

# Switch to the repo's context.
cd $BUILD_DIR

# Experimental pre_compile hook.
bpwatch start pre_compile
  source $BIN_DIR/steps/hooks/pre_compile
bpwatch stop pre_compile

# If no requirements given, assume `setup.py develop`.
if [ ! -f requirements.txt ]; then
  puts-step "No requirements.txt provided; assuming dist package."
  echo "-e ." > requirements.txt
fi

# If no runtime given, assume default version.
if [ ! -f runtime.txt ]; then
  puts-step "No runtime.txt provided; assuming $DEFAULT_PYTHON_VERSION."
  echo $DEFAULT_PYTHON_VERSION > runtime.txt
fi

# ### The Cache
mkdir -p $CACHE_DIR

# Purge "old-style" virtualenvs.
bpwatch start clear_old_venvs
  [ -d $CACHE_DIR/$LEGACY_TRIGGER ] && rm -fr $CACHE_DIR/.heroku/bin $CACHE_DIR/.heroku/lib $CACHE_DIR/.heroku/include
  [ -d $CACHE_DIR/$VIRTUALENV_LOC ] && rm -fr $CACHE_DIR/.heroku/venv $CACHE_DIR/.heroku/src
bpwatch stop clear_old_venvs

# Restore old artifacts from the cache.
bpwatch start restore_cache
  for dir in $CACHED_DIRS; do
    cp -R $CACHE_DIR/$dir . &> /dev/null || true
  done
bpwatch stop restore_cache

set +e
# Create set-aside `.heroku` folder.
mkdir .heroku &> /dev/null
set -e

mkdir -p $(dirname $PROFILE_PATH)

set +e
PYTHON_VERSION=$(cat runtime.txt)

# Install Python.
if [ -f .heroku/python-version ]; then
  if [ ! $(cat .heroku/python-version) = $PYTHON_VERSION ]; then
    bpwatch start uninstall_python
      puts-step "Found $(cat .heroku/python-version), removing."
      rm -fr .heroku/python
    bpwatch stop uninstall_python
  else
    SKIP_INSTALL=1
  fi
fi


if [ ! "$SKIP_INSTALL" ]; then
  bpwatch start install_python
    puts-step "Preparing Python runtime ($PYTHON_VERSION)"
    curl http://envy-versions.s3.amazonaws.com/$PYTHON_VERSION.tar.bz2 -s | tar jx &> /dev/null
    if [[ $? != 0 ]] ; then
      puts-warn "Requested runtime ($PYTHON_VERSION) was not found."
      puts-warn "Aborting.  More info: https://devcenter.heroku.com/articles/python-support"
      exit 1
    fi
    mv python .heroku/python
  bpwatch stop install_python

  # Record for future reference.
  echo $PYTHON_VERSION > .heroku/python-version
  FRESH_PYTHON=true

  hash -r
else
  puts-step "Using Python runtime ($PYTHON_VERSION)"
fi

# If Pip isn't up to date:
if [ "$FRESH_PYTHON" ] || [[ ! $(pip --version) == *$PIP_VERSION* ]]; then
  WORKING_DIR=$(pwd)

  bpwatch start prepare_environment

  bpwatch start install_distribute
    # Prepare it for the real world
    puts-step "Installing Distribute ($DISTRIBUTE_VERSION)"
    cd $ROOT_DIR/vendor/distribute-$DISTRIBUTE_VERSION/
    python setup.py install &> /dev/null
    cd $WORKING_DIR
  bpwatch stop install_distribute

  bpwatch start install_pip
    puts-step "Installing Pip ($PIP_VERSION)"
    cd $ROOT_DIR/vendor/pip-$PIP_VERSION/
    python setup.py install &> /dev/null
    cd $WORKING_DIR

  bpwatch stop install_pip
  bpwatch stop prepare_environment
fi

set -e
hash -r

# Pylibmc support.
# See [`bin/steps/pylibmc`](pylibmc.html).
bpwatch start pylibmc_install
  source $BIN_DIR/steps/pylibmc
bpwatch stop pylibmc_install

# Install Mercurial if it appears to be required.
if (grep -Fiq "hg+" requirements.txt) then
  bpwatch start mercurial_install
    /app/.heroku/python/bin/pip install  mercurial | cleanup | indent
  bpwatch stop mercurial_install
fi

# Install dependencies with Pip.
puts-step "Installing dependencies using Pip ($PIP_VERSION)"


[ ! "$FRESH_PYTHON" ] && bpwatch start pip_install
[ "$FRESH_PYTHON" ] && bpwatch start pip_install_first

/app/.heroku/python/bin/pip install -r requirements.txt --exists-action=w --src=./.heroku/src  | cleanup | indent

[ ! "$FRESH_PYTHON" ] && bpwatch stop pip_install
[ "$FRESH_PYTHON" ] && bpwatch stop pip_install_first

# Django collectstatic support.
bpwatch start collectstatic
  sub-env $BIN_DIR/steps/collectstatic
bpwatch stop collectstatic

# ### Finalize
#

# Set context environment variables.
set-env PATH '$HOME/.heroku/python/bin:$PATH'
set-env PYTHONUNBUFFERED true
set-env PYTHONHOME /app/.heroku/python
set-default-env LIBRARY_PATH /app/.heroku/vendor/lib:/app/.graphviz/lib:/app/.gts/lib
set-default-env LD_LIBRARY_PATH /app/.heroku/vendor/lib:/app/.graphviz/lib:/app/.gts/lib
set-default-env LANG en_US.UTF-8
set-default-env PYTHONHASHSEED random
set-default-env PYTHONPATH /app/


# Experimental post_compile hook.
bpwatch start post_compile
  source $BIN_DIR/steps/hooks/post_compile
bpwatch stop post_compile

# Store new artifacts in cache.
bpwatch start dump_cache
  for dir in $CACHED_DIRS; do
    rm -rf $CACHE_DIR/$dir
    cp -R $dir $CACHE_DIR/
  done
bpwatch stop dump_cache

# ### Fin.
bpwatch start appdir_commit
  deep-mv $BUILD_DIR $ORIG_BUILD_DIR
bpwatch stop appdir_commit

bpwatch start anvil_appdir_commit
  if [ "$SLUG_ID" ]; then
    deep-mv $TMP_APP_DIR $APP_DIR
  fi

bpwatch stop anvil_appdir_commit
bpwatch stop compile

PYTHONCRAP

